import casa.*

describe "casa" {

	test "**Caso de Prueba**: se rompe algo de $1000, aumentando el monto de reparación. 
		Se verifica que la casa: tiene víveres suficientes, hay que hacer reparaciones
		y no está en orden" {
		casaDePepeYJulian.aumentarMontoDeReparacion(1000)
		assert.that(casaDePepeYJulian.tieneViveresSuficientes())
		assert.that(casaDePepeYJulian.hayQueReparar())
		assert.that(not casaDePepeYJulian.laCasaEstaEnOrden())
	}

	test " **Caso de Prueba**: cuenta combinada: la primaria es cuenta con gastos con 50 
		pesos de costo de operación y la secundaria es cuenta corriente con 500 pesos
		de saldo. Luego: se _depositan_ 100 pesos en la cuenta combinada (van a la 
		cuenta con gastos (primaria) depositándose 50 pesos efectivos; se _extraen_ 
		200 pesos (salen de la cuenta corriente ya que a la primaria no le alcanza, 
		dejándola en 300 pesos); Verificar que el saldo de la cuenta con gastos queda
		en 50 pesos, la cuenta corriente con 300 pesos y la combindada con 350 pesos." {
		combinada.primaria(conGastos)
		conGastos.costoOperacion(50)
		combinada.secundaria(corriente)
		corriente.depositarDinero(500)
		combinada.depositarDinero(100)
		combinada.extraerDinero(200)
		assert.equals(50, combinada.saldoPrimaria())
		assert.equals(300, combinada.saldoSecundaria())
		assert.equals(350, combinada.saldo())
	}

	test "**Caso de Prueba**: Si la casa tiene 50% de los víveres, necesita 100 pesos 
		para reparaciones, tiene asociada la cuenta corriente con 1000 pesos de saldo 
		y una estrategia de ahorro _Full_. Al hacer un mantenimiento de la casa:
		> - Como la casa no está en orden, aumenta 40% de sus víveres gastando `40 * 5 = 200` pesos.
		> - Si bien luego les alcanza para hacer las reparaciones, no sobrarían 1000 pesos, 
			así que no se hacen.
		> - _Verificar_ que la casa queda con 90% de víveres, mantiene los 100 pesos para reparaciones, 
			y la cuenta corriente queda con 800 pesos." {
		casaDePepeYJulian.viveres(50)
		casaDePepeYJulian.nuevoGastoDeLaCasa(muebles)
		casaDePepeYJulian.cuentaDeLaCasa(corriente)
		corriente.depositarDinero(1000)
		casaDePepeYJulian.estrategiaDeAhorro(full)
		casaDePepeYJulian.mantenimiento()
		assert.equals(200, full.monto())
		assert.that(not full.correspondeMantenimiento())
		assert.equals(90, casaDePepeYJulian.viveres())
		assert.equals(100, casaDePepeYJulian.montoReparacion())
		assert.equals(800, casaDePepeYJulian.saldoCuentaDeLaCasa())
	}

}

